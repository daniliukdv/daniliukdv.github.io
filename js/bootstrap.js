!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],e):e(t.bootstrap={},t.jQuery,t.Popper)}(this,function(t,e,c){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function u(){return(u=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}e=e&&e.hasOwnProperty("default")?e.default:e,c=c&&c.hasOwnProperty("default")?c.default:c;var s,n,r,a,l,h,f,d,_,g,m,p,v,E,T,C,y,I,A,D,b,S,w,N,O,k,P,L,R,j,H,W,M,U,x,K,V,Q,B,F,Y,G,q,z,X,Z,J,$,tt,et,nt,it,st,rt,ot,at,lt,ht,ct,ut,ft,dt,_t,gt,mt,pt,vt,Et,Tt,Ct,yt,It,At,Dt,bt,St,wt,Nt,Ot,kt,Pt,Lt,Rt,jt,Ht,Wt,Mt,Ut,xt,Kt,Vt,Qt,Bt,Ft,Yt,Gt,qt,zt,Xt,Zt,Jt,$t,te,ee,ne,ie,se,re,oe,ae,le,he,ce,ue,fe,de,_e,ge,me,pe,ve,Ee,Te,Ce,ye,Ie,Ae,De,be,Se,we,Ne,Oe,ke,Pe,Le,Re,je,He,We,Me,Ue,xe,Ke,Ve,Qe,Be,Fe,Ye,Ge,qe,ze,Xe,Ze,Je,$e,tn,en,nn,sn,rn,on,an,ln,hn,cn,un,fn,dn,_n,gn,mn,pn,vn,En,Tn,Cn,yn,In=function(i){var e=!1;function t(t){var e=this,n=!1;return i(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(e)},t),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e,n=t.getAttribute("data-target");n&&"#"!==n||(n=t.getAttribute("href")||""),"#"===n.charAt(0)&&(e=n,n=e="function"==typeof i.escapeSelector?i.escapeSelector(e).substr(1):e.replace(/(:|\.|\[|\]|,|=|@)/g,"\\$1"));try{return 0<i(document).find(n).length?n:null}catch(t){return null}},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){i(t).trigger(e.end)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var s=n[i],r=e[i],o=r&&l.isElement(r)?"element":(a=r,{}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase());if(!new RegExp(s).test(o))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+o+'" but expected type "'+s+'".')}var a}};return e=("undefined"==typeof window||!window.QUnit)&&{end:"transitionend"},i.fn.emulateTransitionEnd=t,l.supportsTransitionEnd()&&(i.event.special[l.TRANSITION_END]={bindType:e.end,delegateType:e.end,handle:function(t){if(i(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}),l}(e),An=(n="alert",a="."+(r="bs.alert"),l=(s=e).fn[n],h={CLOSE:"close"+a,CLOSED:"closed"+a,CLICK_DATA_API:"click"+a+".data-api"},f="alert",d="fade",_="show",g=function(){function i(t){this._element=t}var t=i.prototype;return t.close=function(t){t=t||this._element;var e=this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},t.dispose=function(){s.removeData(this._element,r),this._element=null},t._getRootElement=function(t){var e=In.getSelectorFromElement(t),n=!1;return e&&(n=s(e)[0]),n||(n=s(t).closest("."+f)[0]),n},t._triggerCloseEvent=function(t){var e=s.Event(h.CLOSE);return s(t).trigger(e),e},t._removeElement=function(e){var n=this;s(e).removeClass(_),In.supportsTransitionEnd()&&s(e).hasClass(d)?s(e).one(In.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(150):this._destroyElement(e)},t._destroyElement=function(t){s(t).detach().trigger(h.CLOSED).remove()},i._jQueryInterface=function(n){return this.each(function(){var t=s(this),e=t.data(r);e||(e=new i(this),t.data(r,e)),"close"===n&&e[n](this)})},i._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},o(i,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),i}(),s(document).on(h.CLICK_DATA_API,'[data-dismiss="alert"]',g._handleDismiss(new g)),s.fn[n]=g._jQueryInterface,s.fn[n].Constructor=g,s.fn[n].noConflict=function(){return s.fn[n]=l,g._jQueryInterface},g),Dn=(p="button",E="."+(v="bs.button"),T=".data-api",C=(m=e).fn[p],y="active",I="btn",D='[data-toggle^="button"]',b='[data-toggle="buttons"]',S="input",w=".active",N=".btn",O={CLICK_DATA_API:"click"+E+T,FOCUS_BLUR_DATA_API:(A="focus")+E+T+" blur"+E+T},k=function(){function n(t){this._element=t}var t=n.prototype;return t.toggle=function(){var t=!0,e=!0,n=m(this._element).closest(b)[0];if(n){var i=m(this._element).find(S)[0];if(i){if("radio"===i.type)if(i.checked&&m(this._element).hasClass(y))t=!1;else{var s=m(n).find(w)[0];s&&m(s).removeClass(y)}if(t){if(i.hasAttribute("disabled")||n.hasAttribute("disabled")||i.classList.contains("disabled")||n.classList.contains("disabled"))return;i.checked=!m(this._element).hasClass(y),m(i).trigger("change")}i.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!m(this._element).hasClass(y)),t&&m(this._element).toggleClass(y)},t.dispose=function(){m.removeData(this._element,v),this._element=null},n._jQueryInterface=function(e){return this.each(function(){var t=m(this).data(v);t||(t=new n(this),m(this).data(v,t)),"toggle"===e&&t[e]()})},o(n,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),n}(),m(document).on(O.CLICK_DATA_API,D,function(t){t.preventDefault();var e=t.target;m(e).hasClass(I)||(e=m(e).closest(N)),k._jQueryInterface.call(m(e),"toggle")}).on(O.FOCUS_BLUR_DATA_API,D,function(t){var e=m(t.target).closest(N)[0];m(e).toggleClass(A,/^focus(in)?$/.test(t.type))}),m.fn[p]=k._jQueryInterface,m.fn[p].Constructor=k,m.fn[p].noConflict=function(){return m.fn[p]=C,k._jQueryInterface},k),bn=(L="carousel",j="."+(R="bs.carousel"),H=".data-api",W=(P=e).fn[L],M={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},U={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},x="next",K="prev",V="left",Q="right",B={SLIDE:"slide"+j,SLID:"slid"+j,KEYDOWN:"keydown"+j,MOUSEENTER:"mouseenter"+j,MOUSELEAVE:"mouseleave"+j,TOUCHEND:"touchend"+j,LOAD_DATA_API:"load"+j+H,CLICK_DATA_API:"click"+j+H},F="carousel",Y="active",G="slide",q="carousel-item-right",z="carousel-item-left",X="carousel-item-next",Z="carousel-item-prev",J={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},$=function(){function r(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=P(t)[0],this._indicatorsElement=P(this._element).find(J.INDICATORS)[0],this._addEventListeners()}var t=r.prototype;return t.next=function(){this._isSliding||this._slide(x)},t.nextWhenVisible=function(){!document.hidden&&P(this._element).is(":visible")&&"hidden"!==P(this._element).css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide(K)},t.pause=function(t){t||(this._isPaused=!0),P(this._element).find(J.NEXT_PREV)[0]&&In.supportsTransitionEnd()&&(In.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(t){var e=this;this._activeElement=P(this._element).find(J.ACTIVE_ITEM)[0];var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)P(this._element).one(B.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=n<t?x:K;this._slide(i,this._items[t])}},t.dispose=function(){P(this._element).off(j),P.removeData(this._element,R),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(t){return t=u({},M,t),In.typeCheckConfig(L,t,U),t},t._addEventListeners=function(){var e=this;this._config.keyboard&&P(this._element).on(B.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(P(this._element).on(B.MOUSEENTER,function(t){return e.pause(t)}).on(B.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&P(this._element).on(B.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},t._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},t._getItemIndex=function(t){return this._items=P.makeArray(P(t).parent().find(J.ITEM)),this._items.indexOf(t)},t._getItemByDirection=function(t,e){var n=t===x,i=t===K,s=this._getItemIndex(e),r=this._items.length-1;if((i&&0===s||n&&s===r)&&!this._config.wrap)return e;var o=(s+(t===K?-1:1))%this._items.length;return-1===o?this._items[this._items.length-1]:this._items[o]},t._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(P(this._element).find(J.ACTIVE_ITEM)[0]),s=P.Event(B.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return P(this._element).trigger(s),s},t._setActiveIndicatorElement=function(t){if(this._indicatorsElement){P(this._indicatorsElement).find(J.ACTIVE).removeClass(Y);var e=this._indicatorsElement.children[this._getItemIndex(t)];e&&P(e).addClass(Y)}},t._slide=function(t,e){var n,i,s,r=this,o=P(this._element).find(J.ACTIVE_ITEM)[0],a=this._getItemIndex(o),l=e||o&&this._getItemByDirection(t,o),h=this._getItemIndex(l),c=Boolean(this._interval);if(t===x?(n=z,i=X,s=V):(n=q,i=Z,s=Q),l&&P(l).hasClass(Y))this._isSliding=!1;else if(!this._triggerSlideEvent(l,s).isDefaultPrevented()&&o&&l){this._isSliding=!0,c&&this.pause(),this._setActiveIndicatorElement(l);var u=P.Event(B.SLID,{relatedTarget:l,direction:s,from:a,to:h});In.supportsTransitionEnd()&&P(this._element).hasClass(G)?(P(l).addClass(i),In.reflow(l),P(o).addClass(n),P(l).addClass(n),P(o).one(In.TRANSITION_END,function(){P(l).removeClass(n+" "+i).addClass(Y),P(o).removeClass(Y+" "+i+" "+n),r._isSliding=!1,setTimeout(function(){return P(r._element).trigger(u)},0)}).emulateTransitionEnd(600)):(P(o).removeClass(Y),P(l).addClass(Y),this._isSliding=!1,P(this._element).trigger(u)),c&&this.cycle()}},r._jQueryInterface=function(i){return this.each(function(){var t=P(this).data(R),e=u({},M,P(this).data());"object"==typeof i&&(e=u({},e,i));var n="string"==typeof i?i:e.slide;if(t||(t=new r(this,e),P(this).data(R,t)),"number"==typeof i)t.to(i);else if("string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}else e.interval&&(t.pause(),t.cycle())})},r._dataApiClickHandler=function(t){var e=In.getSelectorFromElement(this);if(e){var n=P(e)[0];if(n&&P(n).hasClass(F)){var i=u({},P(n).data(),P(this).data()),s=this.getAttribute("data-slide-to");s&&(i.interval=!1),r._jQueryInterface.call(P(n),i),s&&P(n).data(R).to(s),t.preventDefault()}}},o(r,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return M}}]),r}(),P(document).on(B.CLICK_DATA_API,J.DATA_SLIDE,$._dataApiClickHandler),P(window).on(B.LOAD_DATA_API,function(){P(J.DATA_RIDE).each(function(){var t=P(this);$._jQueryInterface.call(t,t.data())})}),P.fn[L]=$._jQueryInterface,P.fn[L].Constructor=$,P.fn[L].noConflict=function(){return P.fn[L]=W,$._jQueryInterface},$),Sn=(et="collapse",it="."+(nt="bs.collapse"),st=(tt=e).fn[et],rt={toggle:!0,parent:""},ot={toggle:"boolean",parent:"(string|element)"},at={SHOW:"show"+it,SHOWN:"shown"+it,HIDE:"hide"+it,HIDDEN:"hidden"+it,CLICK_DATA_API:"click"+it+".data-api"},lt="show",ht="collapse",ct="collapsing",ut="collapsed",ft="width",dt="height",_t={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},gt=function(){function a(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=tt.makeArray(tt('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=tt(_t.DATA_TOGGLE),i=0;i<n.length;i++){var s=n[i],r=In.getSelectorFromElement(s);null!==r&&0<tt(r).filter(t).length&&(this._selector=r,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=a.prototype;return t.toggle=function(){tt(this._element).hasClass(lt)?this.hide():this.show()},t.show=function(){var t,e,n=this;if(!this._isTransitioning&&!tt(this._element).hasClass(lt)&&(this._parent&&0===(t=tt.makeArray(tt(this._parent).find(_t.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),!(t&&(e=tt(t).not(this._selector).data(nt))&&e._isTransitioning))){var i=tt.Event(at.SHOW);if(tt(this._element).trigger(i),!i.isDefaultPrevented()){t&&(a._jQueryInterface.call(tt(t).not(this._selector),"hide"),e||tt(t).data(nt,null));var s=this._getDimension();tt(this._element).removeClass(ht).addClass(ct),(this._element.style[s]=0)<this._triggerArray.length&&tt(this._triggerArray).removeClass(ut).attr("aria-expanded",!0),this.setTransitioning(!0);var r=function(){tt(n._element).removeClass(ct).addClass(ht).addClass(lt),n._element.style[s]="",n.setTransitioning(!1),tt(n._element).trigger(at.SHOWN)};if(In.supportsTransitionEnd()){var o="scroll"+(s[0].toUpperCase()+s.slice(1));tt(this._element).one(In.TRANSITION_END,r).emulateTransitionEnd(600),this._element.style[s]=this._element[o]+"px"}else r()}}},t.hide=function(){var t=this;if(!this._isTransitioning&&tt(this._element).hasClass(lt)){var e=tt.Event(at.HIDE);if(tt(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",In.reflow(this._element),tt(this._element).addClass(ct).removeClass(ht).removeClass(lt),0<this._triggerArray.length)for(var i=0;i<this._triggerArray.length;i++){var s=this._triggerArray[i],r=In.getSelectorFromElement(s);if(null!==r)tt(r).hasClass(lt)||tt(s).addClass(ut).attr("aria-expanded",!1)}this.setTransitioning(!0);var o=function(){t.setTransitioning(!1),tt(t._element).removeClass(ct).addClass(ht).trigger(at.HIDDEN)};this._element.style[n]="",In.supportsTransitionEnd()?tt(this._element).one(In.TRANSITION_END,o).emulateTransitionEnd(600):o()}}},t.setTransitioning=function(t){this._isTransitioning=t},t.dispose=function(){tt.removeData(this._element,nt),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(t){return(t=u({},rt,t)).toggle=Boolean(t.toggle),In.typeCheckConfig(et,t,ot),t},t._getDimension=function(){return tt(this._element).hasClass(ft)?ft:dt},t._getParent=function(){var n=this,t=null;In.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=tt(this._config.parent)[0];var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return tt(t).find(e).each(function(t,e){n._addAriaAndCollapsedClass(a._getTargetFromElement(e),[e])}),t},t._addAriaAndCollapsedClass=function(t,e){if(t){var n=tt(t).hasClass(lt);0<e.length&&tt(e).toggleClass(ut,!n).attr("aria-expanded",n)}},a._getTargetFromElement=function(t){var e=In.getSelectorFromElement(t);return e?tt(e)[0]:null},a._jQueryInterface=function(i){return this.each(function(){var t=tt(this),e=t.data(nt),n=u({},rt,t.data(),"object"==typeof i&&i);if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new a(this,n),t.data(nt,e)),"string"==typeof i){if(void 0===e[i])throw new TypeError('No method named "'+i+'"');e[i]()}})},o(a,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return rt}}]),a}(),tt(document).on(at.CLICK_DATA_API,_t.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=tt(this),e=In.getSelectorFromElement(this);tt(e).each(function(){var t=tt(this),e=t.data(nt)?"toggle":n.data();gt._jQueryInterface.call(t,e)})}),tt.fn[et]=gt._jQueryInterface,tt.fn[et].Constructor=gt,tt.fn[et].noConflict=function(){return tt.fn[et]=st,gt._jQueryInterface},gt),wn=(pt="dropdown",Et="."+(vt="bs.dropdown"),Tt=".data-api",Ct=(mt=e).fn[pt],yt=new RegExp("38|40|27"),It={HIDE:"hide"+Et,HIDDEN:"hidden"+Et,SHOW:"show"+Et,SHOWN:"shown"+Et,CLICK:"click"+Et,CLICK_DATA_API:"click"+Et+Tt,KEYDOWN_DATA_API:"keydown"+Et+Tt,KEYUP_DATA_API:"keyup"+Et+Tt},At="disabled",Dt="show",bt="dropup",St="dropright",wt="dropleft",Nt="dropdown-menu-right",Ot="dropdown-menu-left",kt="position-static",Pt='[data-toggle="dropdown"]',Lt=".dropdown form",Rt=".dropdown-menu",jt=".navbar-nav",Ht=".dropdown-menu .dropdown-item:not(.disabled)",Wt="top-start",Mt="top-end",Ut="bottom-start",xt="bottom-end",Kt="right-start",Vt="left-start",Qt={offset:0,flip:!0,boundary:"scrollParent"},Bt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)"},Ft=function(){function l(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=l.prototype;return t.toggle=function(){if(!this._element.disabled&&!mt(this._element).hasClass(At)){var t=l._getParentFromElement(this._element),e=mt(this._menu).hasClass(Dt);if(l._clearMenus(),!e){var n={relatedTarget:this._element},i=mt.Event(It.SHOW,n);if(mt(t).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar){if(void 0===c)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var s=this._element;mt(t).hasClass(bt)&&(mt(this._menu).hasClass(Ot)||mt(this._menu).hasClass(Nt))&&(s=t),"scrollParent"!==this._config.boundary&&mt(t).addClass(kt),this._popper=new c(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===mt(t).closest(jt).length&&mt("body").children().on("mouseover",null,mt.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),mt(this._menu).toggleClass(Dt),mt(t).toggleClass(Dt).trigger(mt.Event(It.SHOWN,n))}}}},t.dispose=function(){mt.removeData(this._element,vt),mt(this._element).off(Et),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;mt(this._element).on(It.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},t._getConfig=function(t){return t=u({},this.constructor.Default,mt(this._element).data(),t),In.typeCheckConfig(pt,t,this.constructor.DefaultType),t},t._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);this._menu=mt(t).find(Rt)[0]}return this._menu},t._getPlacement=function(){var t=mt(this._element).parent(),e=Ut;return t.hasClass(bt)?(e=Wt,mt(this._menu).hasClass(Nt)&&(e=Mt)):t.hasClass(St)?e=Kt:t.hasClass(wt)?e=Vt:mt(this._menu).hasClass(Nt)&&(e=xt),e},t._detectNavbar=function(){return 0<mt(this._element).closest(".navbar").length},t._getPopperConfig=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=u({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset,{placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}}},l._jQueryInterface=function(e){return this.each(function(){var t=mt(this).data(vt);if(t||(t=new l(this,"object"==typeof e?e:null),mt(this).data(vt,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},l._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=mt.makeArray(mt(Pt)),n=0;n<e.length;n++){var i=l._getParentFromElement(e[n]),s=mt(e[n]).data(vt),r={relatedTarget:e[n]};if(s){var o=s._menu;if(mt(i).hasClass(Dt)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&mt.contains(i,t.target))){var a=mt.Event(It.HIDE,r);mt(i).trigger(a),a.isDefaultPrevented()||("ontouchstart"in document.documentElement&&mt("body").children().off("mouseover",null,mt.noop),e[n].setAttribute("aria-expanded","false"),mt(o).removeClass(Dt),mt(i).removeClass(Dt).trigger(mt.Event(It.HIDDEN,r)))}}}},l._getParentFromElement=function(t){var e,n=In.getSelectorFromElement(t);return n&&(e=mt(n)[0]),e||t.parentNode},l._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||mt(t.target).closest(Rt).length)):yt.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!mt(this).hasClass(At))){var e=l._getParentFromElement(this),n=mt(e).hasClass(Dt);if((n||27===t.which&&32===t.which)&&(!n||27!==t.which&&32!==t.which)){var i=mt(e).find(Ht).get();if(0!==i.length){var s=i.indexOf(t.target);38===t.which&&0<s&&s--,40===t.which&&s<i.length-1&&s++,s<0&&(s=0),i[s].focus()}}else{if(27===t.which){var r=mt(e).find(Pt)[0];mt(r).trigger("focus")}mt(this).trigger("click")}}},o(l,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Qt}},{key:"DefaultType",get:function(){return Bt}}]),l}(),mt(document).on(It.KEYDOWN_DATA_API,Pt,Ft._dataApiKeydownHandler).on(It.KEYDOWN_DATA_API,Rt,Ft._dataApiKeydownHandler).on(It.CLICK_DATA_API+" "+It.KEYUP_DATA_API,Ft._clearMenus).on(It.CLICK_DATA_API,Pt,function(t){t.preventDefault(),t.stopPropagation(),Ft._jQueryInterface.call(mt(this),"toggle")}).on(It.CLICK_DATA_API,Lt,function(t){t.stopPropagation()}),mt.fn[pt]=Ft._jQueryInterface,mt.fn[pt].Constructor=Ft,mt.fn[pt].noConflict=function(){return mt.fn[pt]=Ct,Ft._jQueryInterface},Ft),Nn=(Gt="modal",zt="."+(qt="bs.modal"),Xt=(Yt=e).fn[Gt],Zt={backdrop:!0,keyboard:!0,focus:!0,show:!0},Jt={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},$t={HIDE:"hide"+zt,HIDDEN:"hidden"+zt,SHOW:"show"+zt,SHOWN:"shown"+zt,FOCUSIN:"focusin"+zt,RESIZE:"resize"+zt,CLICK_DISMISS:"click.dismiss"+zt,KEYDOWN_DISMISS:"keydown.dismiss"+zt,MOUSEUP_DISMISS:"mouseup.dismiss"+zt,MOUSEDOWN_DISMISS:"mousedown.dismiss"+zt,CLICK_DATA_API:"click"+zt+".data-api"},te="modal-scrollbar-measure",ee="modal-backdrop",ne="modal-open",ie="fade",se="show",re={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},oe=function(){function s(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=Yt(t).find(re.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var t=s.prototype;return t.toggle=function(t){return this._isShown?this.hide():this.show(t)},t.show=function(t){var e=this;if(!this._isTransitioning&&!this._isShown){In.supportsTransitionEnd()&&Yt(this._element).hasClass(ie)&&(this._isTransitioning=!0);var n=Yt.Event($t.SHOW,{relatedTarget:t});Yt(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),Yt(document.body).addClass(ne),this._setEscapeEvent(),this._setResizeEvent(),Yt(this._element).on($t.CLICK_DISMISS,re.DATA_DISMISS,function(t){return e.hide(t)}),Yt(this._dialog).on($t.MOUSEDOWN_DISMISS,function(){Yt(e._element).one($t.MOUSEUP_DISMISS,function(t){Yt(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},t.hide=function(t){var e=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var n=Yt.Event($t.HIDE);if(Yt(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=In.supportsTransitionEnd()&&Yt(this._element).hasClass(ie);i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),Yt(document).off($t.FOCUSIN),Yt(this._element).removeClass(se),Yt(this._element).off($t.CLICK_DISMISS),Yt(this._dialog).off($t.MOUSEDOWN_DISMISS),i?Yt(this._element).one(In.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(300):this._hideModal()}}},t.dispose=function(){Yt.removeData(this._element,qt),Yt(window,document,this._element,this._backdrop).off(zt),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(t){return t=u({},Zt,t),In.typeCheckConfig(Gt,t,Jt),t},t._showElement=function(t){var e=this,n=In.supportsTransitionEnd()&&Yt(this._element).hasClass(ie);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&In.reflow(this._element),Yt(this._element).addClass(se),this._config.focus&&this._enforceFocus();var i=Yt.Event($t.SHOWN,{relatedTarget:t}),s=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,Yt(e._element).trigger(i)};n?Yt(this._dialog).one(In.TRANSITION_END,s).emulateTransitionEnd(300):s()},t._enforceFocus=function(){var e=this;Yt(document).off($t.FOCUSIN).on($t.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===Yt(e._element).has(t.target).length&&e._element.focus()})},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?Yt(this._element).on($t.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||Yt(this._element).off($t.KEYDOWN_DISMISS)},t._setResizeEvent=function(){var e=this;this._isShown?Yt(window).on($t.RESIZE,function(t){return e.handleUpdate(t)}):Yt(window).off($t.RESIZE)},t._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){Yt(document.body).removeClass(ne),t._resetAdjustments(),t._resetScrollbar(),Yt(t._element).trigger($t.HIDDEN)})},t._removeBackdrop=function(){this._backdrop&&(Yt(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(t){var e=this,n=Yt(this._element).hasClass(ie)?ie:"";if(this._isShown&&this._config.backdrop){var i=In.supportsTransitionEnd()&&n;if(this._backdrop=document.createElement("div"),this._backdrop.className=ee,n&&Yt(this._backdrop).addClass(n),Yt(this._backdrop).appendTo(document.body),Yt(this._element).on($t.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),i&&In.reflow(this._backdrop),Yt(this._backdrop).addClass(se),!t)return;if(!i)return void t();Yt(this._backdrop).one(In.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){Yt(this._backdrop).removeClass(se);var s=function(){e._removeBackdrop(),t&&t()};In.supportsTransitionEnd()&&Yt(this._element).hasClass(ie)?Yt(this._backdrop).one(In.TRANSITION_END,s).emulateTransitionEnd(150):s()}else t&&t()},t._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var s=this;if(this._isBodyOverflowing){Yt(re.FIXED_CONTENT).each(function(t,e){var n=Yt(e)[0].style.paddingRight,i=Yt(e).css("padding-right");Yt(e).data("padding-right",n).css("padding-right",parseFloat(i)+s._scrollbarWidth+"px")}),Yt(re.STICKY_CONTENT).each(function(t,e){var n=Yt(e)[0].style.marginRight,i=Yt(e).css("margin-right");Yt(e).data("margin-right",n).css("margin-right",parseFloat(i)-s._scrollbarWidth+"px")}),Yt(re.NAVBAR_TOGGLER).each(function(t,e){var n=Yt(e)[0].style.marginRight,i=Yt(e).css("margin-right");Yt(e).data("margin-right",n).css("margin-right",parseFloat(i)+s._scrollbarWidth+"px")});var t=document.body.style.paddingRight,e=Yt("body").css("padding-right");Yt("body").data("padding-right",t).css("padding-right",parseFloat(e)+this._scrollbarWidth+"px")}},t._resetScrollbar=function(){Yt(re.FIXED_CONTENT).each(function(t,e){var n=Yt(e).data("padding-right");void 0!==n&&Yt(e).css("padding-right",n).removeData("padding-right")}),Yt(re.STICKY_CONTENT+", "+re.NAVBAR_TOGGLER).each(function(t,e){var n=Yt(e).data("margin-right");void 0!==n&&Yt(e).css("margin-right",n).removeData("margin-right")});var t=Yt("body").data("padding-right");void 0!==t&&Yt("body").css("padding-right",t).removeData("padding-right")},t._getScrollbarWidth=function(){var t=document.createElement("div");t.className=te,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},s._jQueryInterface=function(n,i){return this.each(function(){var t=Yt(this).data(qt),e=u({},s.Default,Yt(this).data(),"object"==typeof n&&n);if(t||(t=new s(this,e),Yt(this).data(qt,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n](i)}else e.show&&t.show(i)})},o(s,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Zt}}]),s}(),Yt(document).on($t.CLICK_DATA_API,re.DATA_TOGGLE,function(t){var e,n=this,i=In.getSelectorFromElement(this);i&&(e=Yt(i)[0]);var s=Yt(e).data(qt)?"toggle":u({},Yt(e).data(),Yt(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var r=Yt(e).one($t.SHOW,function(t){t.isDefaultPrevented()||r.one($t.HIDDEN,function(){Yt(n).is(":visible")&&n.focus()})});oe._jQueryInterface.call(Yt(e),s,this)}),Yt.fn[Gt]=oe._jQueryInterface,Yt.fn[Gt].Constructor=oe,Yt.fn[Gt].noConflict=function(){return Yt.fn[Gt]=Xt,oe._jQueryInterface},oe),On=(le="tooltip",ce="."+(he="bs.tooltip"),ue=(ae=e).fn[le],fe="bs-tooltip",de=new RegExp("(^|\\s)"+fe+"\\S+","g"),me={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(ge={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(_e={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},ve="out",Ee={HIDE:"hide"+ce,HIDDEN:"hidden"+ce,SHOW:(pe="show")+ce,SHOWN:"shown"+ce,INSERTED:"inserted"+ce,CLICK:"click"+ce,FOCUSIN:"focusin"+ce,FOCUSOUT:"focusout"+ce,MOUSEENTER:"mouseenter"+ce,MOUSELEAVE:"mouseleave"+ce},Te="fade",Ce="show",ye=".tooltip-inner",Ie=".arrow",Ae="hover",De="focus",be="click",Se="manual",we=function(){function h(t,e){if(void 0===c)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var t=h.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=ae(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),ae(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(ae(this.getTipElement()).hasClass(Ce))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),ae.removeData(this.element,this.constructor.DATA_KEY),ae(this.element).off(this.constructor.EVENT_KEY),ae(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&ae(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var e=this;if("none"===ae(this.element).css("display"))throw new Error("Please use show on visible elements");var t=ae.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){ae(this.element).trigger(t);var n=ae.contains(this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!n)return;var i=this.getTipElement(),s=In.getUID(this.constructor.NAME);i.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&ae(i).addClass(Te);var r="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,o=this._getAttachment(r);this.addAttachmentClass(o);var a=!1===this.config.container?document.body:ae(this.config.container);ae(i).data(this.constructor.DATA_KEY,this),ae.contains(this.element.ownerDocument.documentElement,this.tip)||ae(i).appendTo(a),ae(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new c(this.element,i,{placement:o,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:Ie},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),ae(i).addClass(Ce),"ontouchstart"in document.documentElement&&ae("body").children().on("mouseover",null,ae.noop);var l=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,ae(e.element).trigger(e.constructor.Event.SHOWN),t===ve&&e._leave(null,e)};In.supportsTransitionEnd()&&ae(this.tip).hasClass(Te)?ae(this.tip).one(In.TRANSITION_END,l).emulateTransitionEnd(h._TRANSITION_DURATION):l()}},t.hide=function(t){var e=this,n=this.getTipElement(),i=ae.Event(this.constructor.Event.HIDE),s=function(){e._hoverState!==pe&&n.parentNode&&n.parentNode.removeChild(n),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),ae(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};ae(this.element).trigger(i),i.isDefaultPrevented()||(ae(n).removeClass(Ce),"ontouchstart"in document.documentElement&&ae("body").children().off("mouseover",null,ae.noop),this._activeTrigger[be]=!1,this._activeTrigger[De]=!1,this._activeTrigger[Ae]=!1,In.supportsTransitionEnd()&&ae(this.tip).hasClass(Te)?ae(n).one(In.TRANSITION_END,s).emulateTransitionEnd(150):s(),this._hoverState="")},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(t){ae(this.getTipElement()).addClass(fe+"-"+t)},t.getTipElement=function(){return this.tip=this.tip||ae(this.config.template)[0],this.tip},t.setContent=function(){var t=ae(this.getTipElement());this.setElementContent(t.find(ye),this.getTitle()),t.removeClass(Te+" "+Ce)},t.setElementContent=function(t,e){var n=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?n?ae(e).parent().is(t)||t.empty().append(e):t.text(ae(e).text()):t[n?"html":"text"](e)},t.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},t._getAttachment=function(t){return ge[t.toUpperCase()]},t._setListeners=function(){var i=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)ae(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(t){return i.toggle(t)});else if(t!==Se){var e=t===Ae?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=t===Ae?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;ae(i.element).on(e,i.config.selector,function(t){return i._enter(t)}).on(n,i.config.selector,function(t){return i._leave(t)})}ae(i.element).closest(".modal").on("hide.bs.modal",function(){return i.hide()})}),this.config.selector?this.config=u({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},t._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},t._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||ae(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),ae(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?De:Ae]=!0),ae(e.getTipElement()).hasClass(Ce)||e._hoverState===pe?e._hoverState=pe:(clearTimeout(e._timeout),e._hoverState=pe,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===pe&&e.show()},e.config.delay.show):e.show())},t._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||ae(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),ae(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?De:Ae]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=ve,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===ve&&e.hide()},e.config.delay.hide):e.hide())},t._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},t._getConfig=function(t){return"number"==typeof(t=u({},this.constructor.Default,ae(this.element).data(),t)).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),In.typeCheckConfig(le,t,this.constructor.DefaultType),t},t._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},t._cleanTipClass=function(){var t=ae(this.getTipElement()),e=t.attr("class").match(de);null!==e&&0<e.length&&t.removeClass(e.join(""))},t._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},t._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(ae(t).removeClass(Te),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},h._jQueryInterface=function(n){return this.each(function(){var t=ae(this).data(he),e="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new h(this,e),ae(this).data(he,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},o(h,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return me}},{key:"NAME",get:function(){return le}},{key:"DATA_KEY",get:function(){return he}},{key:"Event",get:function(){return Ee}},{key:"EVENT_KEY",get:function(){return ce}},{key:"DefaultType",get:function(){return _e}}]),h}(),ae.fn[le]=we._jQueryInterface,ae.fn[le].Constructor=we,ae.fn[le].noConflict=function(){return ae.fn[le]=ue,we._jQueryInterface},we),kn=(Oe="popover",Pe="."+(ke="bs.popover"),Le=(Ne=e).fn[Oe],Re="bs-popover",je=new RegExp("(^|\\s)"+Re+"\\S+","g"),He=u({},On.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),We=u({},On.DefaultType,{content:"(string|element|function)"}),Me="fade",xe=".popover-header",Ke=".popover-body",Ve={HIDE:"hide"+Pe,HIDDEN:"hidden"+Pe,SHOW:(Ue="show")+Pe,SHOWN:"shown"+Pe,INSERTED:"inserted"+Pe,CLICK:"click"+Pe,FOCUSIN:"focusin"+Pe,FOCUSOUT:"focusout"+Pe,MOUSEENTER:"mouseenter"+Pe,MOUSELEAVE:"mouseleave"+Pe},Qe=function(t){var e,n;function i(){return t.apply(this,arguments)||this}n=t,(e=i).prototype=Object.create(n.prototype),(e.prototype.constructor=e).__proto__=n;var s=i.prototype;return s.isWithContent=function(){return this.getTitle()||this._getContent()},s.addAttachmentClass=function(t){Ne(this.getTipElement()).addClass(Re+"-"+t)},s.getTipElement=function(){return this.tip=this.tip||Ne(this.config.template)[0],this.tip},s.setContent=function(){var t=Ne(this.getTipElement());this.setElementContent(t.find(xe),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(Ke),e),t.removeClass(Me+" "+Ue)},s._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},s._cleanTipClass=function(){var t=Ne(this.getTipElement()),e=t.attr("class").match(je);null!==e&&0<e.length&&t.removeClass(e.join(""))},i._jQueryInterface=function(n){return this.each(function(){var t=Ne(this).data(ke),e="object"==typeof n?n:null;if((t||!/destroy|hide/.test(n))&&(t||(t=new i(this,e),Ne(this).data(ke,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return He}},{key:"NAME",get:function(){return Oe}},{key:"DATA_KEY",get:function(){return ke}},{key:"Event",get:function(){return Ve}},{key:"EVENT_KEY",get:function(){return Pe}},{key:"DefaultType",get:function(){return We}}]),i}(On),Ne.fn[Oe]=Qe._jQueryInterface,Ne.fn[Oe].Constructor=Qe,Ne.fn[Oe].noConflict=function(){return Ne.fn[Oe]=Le,Qe._jQueryInterface},Qe),Pn=(Fe="scrollspy",Ge="."+(Ye="bs.scrollspy"),qe=(Be=e).fn[Fe],ze={offset:10,method:"auto",target:""},Xe={offset:"number",method:"string",target:"(string|element)"},Ze={ACTIVATE:"activate"+Ge,SCROLL:"scroll"+Ge,LOAD_DATA_API:"load"+Ge+".data-api"},Je="dropdown-item",$e="active",tn={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},en="offset",nn="position",sn=function(){function n(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+tn.NAV_LINKS+","+this._config.target+" "+tn.LIST_ITEMS+","+this._config.target+" "+tn.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,Be(this._scrollElement).on(Ze.SCROLL,function(t){return n._process(t)}),this.refresh(),this._process()}var t=n.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?en:nn,s="auto"===this._config.method?t:this._config.method,r=s===nn?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),Be.makeArray(Be(this._selector)).map(function(t){var e,n=In.getSelectorFromElement(t);if(n&&(e=Be(n)[0]),e){var i=e.getBoundingClientRect();if(i.width||i.height)return[Be(e)[s]().top+r,n]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},t.dispose=function(){Be.removeData(this._element,Ye),Be(this._scrollElement).off(Ge),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(t){if("string"!=typeof(t=u({},ze,t)).target){var e=Be(t.target).attr("id");e||(e=In.getUID(Fe),Be(t.target).attr("id",e)),t.target="#"+e}return In.typeCheckConfig(Fe,t,Xe),t},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var s=this._offsets.length;s--;){this._activeTarget!==this._targets[s]&&t>=this._offsets[s]&&(void 0===this._offsets[s+1]||t<this._offsets[s+1])&&this._activate(this._targets[s])}}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",");t=t.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var n=Be(t.join(","));n.hasClass(Je)?(n.closest(tn.DROPDOWN).find(tn.DROPDOWN_TOGGLE).addClass($e),n.addClass($e)):(n.addClass($e),n.parents(tn.NAV_LIST_GROUP).prev(tn.NAV_LINKS+", "+tn.LIST_ITEMS).addClass($e),n.parents(tn.NAV_LIST_GROUP).prev(tn.NAV_ITEMS).children(tn.NAV_LINKS).addClass($e)),Be(this._scrollElement).trigger(Ze.ACTIVATE,{relatedTarget:e})},t._clear=function(){Be(this._selector).filter(tn.ACTIVE).removeClass($e)},n._jQueryInterface=function(e){return this.each(function(){var t=Be(this).data(Ye);if(t||(t=new n(this,"object"==typeof e&&e),Be(this).data(Ye,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},o(n,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return ze}}]),n}(),Be(window).on(Ze.LOAD_DATA_API,function(){for(var t=Be.makeArray(Be(tn.DATA_SPY)),e=t.length;e--;){var n=Be(t[e]);sn._jQueryInterface.call(n,n.data())}}),Be.fn[Fe]=sn._jQueryInterface,Be.fn[Fe].Constructor=sn,Be.fn[Fe].noConflict=function(){return Be.fn[Fe]=qe,sn._jQueryInterface},sn),Ln=(an="."+(on="bs.tab"),ln=(rn=e).fn.tab,hn={HIDE:"hide"+an,HIDDEN:"hidden"+an,SHOW:"show"+an,SHOWN:"shown"+an,CLICK_DATA_API:"click"+an+".data-api"},cn="dropdown-menu",un="active",fn="disabled",dn="fade",_n="show",gn=".dropdown",mn=".nav, .list-group",pn=".active",vn="> li > .active",En='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',Tn=".dropdown-toggle",Cn="> .dropdown-menu .active",yn=function(){function i(t){this._element=t}var t=i.prototype;return t.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&rn(this._element).hasClass(un)||rn(this._element).hasClass(fn))){var t,i,e=rn(this._element).closest(mn)[0],s=In.getSelectorFromElement(this._element);if(e){var r="UL"===e.nodeName?vn:pn;i=(i=rn.makeArray(rn(e).find(r)))[i.length-1]}var o=rn.Event(hn.HIDE,{relatedTarget:this._element}),a=rn.Event(hn.SHOW,{relatedTarget:i});if(i&&rn(i).trigger(o),rn(this._element).trigger(a),!a.isDefaultPrevented()&&!o.isDefaultPrevented()){s&&(t=rn(s)[0]),this._activate(this._element,e);var l=function(){var t=rn.Event(hn.HIDDEN,{relatedTarget:n._element}),e=rn.Event(hn.SHOWN,{relatedTarget:i});rn(i).trigger(t),rn(n._element).trigger(e)};t?this._activate(t,t.parentNode,l):l()}}},t.dispose=function(){rn.removeData(this._element,on),this._element=null},t._activate=function(t,e,n){var i=this,s=("UL"===e.nodeName?rn(e).find(vn):rn(e).children(pn))[0],r=n&&In.supportsTransitionEnd()&&s&&rn(s).hasClass(dn),o=function(){return i._transitionComplete(t,s,n)};s&&r?rn(s).one(In.TRANSITION_END,o).emulateTransitionEnd(150):o()},t._transitionComplete=function(t,e,n){if(e){rn(e).removeClass(_n+" "+un);var i=rn(e.parentNode).find(Cn)[0];i&&rn(i).removeClass(un),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(rn(t).addClass(un),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),In.reflow(t),rn(t).addClass(_n),t.parentNode&&rn(t.parentNode).hasClass(cn)){var s=rn(t).closest(gn)[0];s&&rn(s).find(Tn).addClass(un),t.setAttribute("aria-expanded",!0)}n&&n()},i._jQueryInterface=function(n){return this.each(function(){var t=rn(this),e=t.data(on);if(e||(e=new i(this),t.data(on,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),i}(),rn(document).on(hn.CLICK_DATA_API,En,function(t){t.preventDefault(),yn._jQueryInterface.call(rn(this),"show")}),rn.fn.tab=yn._jQueryInterface,rn.fn.tab.Constructor=yn,rn.fn.tab.noConflict=function(){return rn.fn.tab=ln,yn._jQueryInterface},yn);!function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||4<=e[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(e),t.Util=In,t.Alert=An,t.Button=Dn,t.Carousel=bn,t.Collapse=Sn,t.Dropdown=wn,t.Modal=Nn,t.Popover=kn,t.Scrollspy=Pn,t.Tab=Ln,t.Tooltip=On,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
